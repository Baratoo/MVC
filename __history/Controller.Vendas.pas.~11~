unit Controller.Vendas;

interface

uses
  Controller.Interfaces, Model.Interfaces, Model.Venda;

type
  TControllerVenda = class(TInterfacedObject, IControllerVendas)
    private
      FItem : IControllerItens;
      FModel : IModelVenda;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : IControllerVendas;
      function Item : IControllerItens;
      function Model : IModelVenda;
  end;

implementation

uses
  Controller.Itens;

{ TControllerVenda }

constructor TControllerVenda.Create;
begin
  FModel := TModelVenda.New;
  FItem := TControllerItens.New(Self);
end;

destructor TControllerVenda.Destroy;
begin

  inherited;
end;

function TControllerVenda.Item: IControllerItens;
begin
  Result := FItem;
end;


function TControllerVenda.Model: IModelVenda;
begin
  Result := FModel;
end;

class function TControllerVenda.New: IControllerVendas;
begin
  Result := Self.Create;
end;

end.
